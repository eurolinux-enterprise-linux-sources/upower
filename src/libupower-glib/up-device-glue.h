/*
 * Generated by gdbus-codegen 2.42.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __UP_DEVICE_GLUE_H__
#define __UP_DEVICE_GLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.UPower.Device */

#define UP_TYPE_DEVICE_GLUE (up_device_glue_get_type ())
#define UP_DEVICE_GLUE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_DEVICE_GLUE, UpDeviceGlue))
#define UP_IS_DEVICE_GLUE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_DEVICE_GLUE))
#define UP_DEVICE_GLUE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UP_TYPE_DEVICE_GLUE, UpDeviceGlueIface))

struct _UpDeviceGlue;
typedef struct _UpDeviceGlue UpDeviceGlue;
typedef struct _UpDeviceGlueIface UpDeviceGlueIface;

struct _UpDeviceGlueIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_history) (
    UpDeviceGlue *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution);

  gboolean (*handle_get_statistics) (
    UpDeviceGlue *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type);

  gboolean (*handle_refresh) (
    UpDeviceGlue *object,
    GDBusMethodInvocation *invocation);

  gdouble  (*get_capacity) (UpDeviceGlue *object);

  gdouble  (*get_energy) (UpDeviceGlue *object);

  gdouble  (*get_energy_empty) (UpDeviceGlue *object);

  gdouble  (*get_energy_full) (UpDeviceGlue *object);

  gdouble  (*get_energy_full_design) (UpDeviceGlue *object);

  gdouble  (*get_energy_rate) (UpDeviceGlue *object);

  gboolean  (*get_has_history) (UpDeviceGlue *object);

  gboolean  (*get_has_statistics) (UpDeviceGlue *object);

  const gchar * (*get_icon_name) (UpDeviceGlue *object);

  gboolean  (*get_is_present) (UpDeviceGlue *object);

  gboolean  (*get_is_rechargeable) (UpDeviceGlue *object);

  gdouble  (*get_luminosity) (UpDeviceGlue *object);

  const gchar * (*get_model) (UpDeviceGlue *object);

  const gchar * (*get_native_path) (UpDeviceGlue *object);

  gboolean  (*get_online) (UpDeviceGlue *object);

  gdouble  (*get_percentage) (UpDeviceGlue *object);

  gboolean  (*get_power_supply) (UpDeviceGlue *object);

  const gchar * (*get_serial) (UpDeviceGlue *object);

  guint  (*get_state) (UpDeviceGlue *object);

  guint  (*get_technology) (UpDeviceGlue *object);

  gdouble  (*get_temperature) (UpDeviceGlue *object);

  gint64  (*get_time_to_empty) (UpDeviceGlue *object);

  gint64  (*get_time_to_full) (UpDeviceGlue *object);

  guint  (*get_type_) (UpDeviceGlue *object);

  guint64  (*get_update_time) (UpDeviceGlue *object);

  const gchar * (*get_vendor) (UpDeviceGlue *object);

  gdouble  (*get_voltage) (UpDeviceGlue *object);

  guint  (*get_warning_level) (UpDeviceGlue *object);

};

GType up_device_glue_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *up_device_glue_interface_info (void);
guint up_device_glue_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void up_device_glue_complete_refresh (
    UpDeviceGlue *object,
    GDBusMethodInvocation *invocation);

void up_device_glue_complete_get_history (
    UpDeviceGlue *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);

void up_device_glue_complete_get_statistics (
    UpDeviceGlue *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);



/* D-Bus method calls: */
void up_device_glue_call_refresh (
    UpDeviceGlue *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_device_glue_call_refresh_finish (
    UpDeviceGlue *proxy,
    GAsyncResult *res,
    GError **error);

gboolean up_device_glue_call_refresh_sync (
    UpDeviceGlue *proxy,
    GCancellable *cancellable,
    GError **error);

void up_device_glue_call_get_history (
    UpDeviceGlue *proxy,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_device_glue_call_get_history_finish (
    UpDeviceGlue *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean up_device_glue_call_get_history_sync (
    UpDeviceGlue *proxy,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);

void up_device_glue_call_get_statistics (
    UpDeviceGlue *proxy,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_device_glue_call_get_statistics_finish (
    UpDeviceGlue *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean up_device_glue_call_get_statistics_sync (
    UpDeviceGlue *proxy,
    const gchar *arg_type,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *up_device_glue_get_native_path (UpDeviceGlue *object);
gchar *up_device_glue_dup_native_path (UpDeviceGlue *object);
void up_device_glue_set_native_path (UpDeviceGlue *object, const gchar *value);

const gchar *up_device_glue_get_vendor (UpDeviceGlue *object);
gchar *up_device_glue_dup_vendor (UpDeviceGlue *object);
void up_device_glue_set_vendor (UpDeviceGlue *object, const gchar *value);

const gchar *up_device_glue_get_model (UpDeviceGlue *object);
gchar *up_device_glue_dup_model (UpDeviceGlue *object);
void up_device_glue_set_model (UpDeviceGlue *object, const gchar *value);

const gchar *up_device_glue_get_serial (UpDeviceGlue *object);
gchar *up_device_glue_dup_serial (UpDeviceGlue *object);
void up_device_glue_set_serial (UpDeviceGlue *object, const gchar *value);

guint64 up_device_glue_get_update_time (UpDeviceGlue *object);
void up_device_glue_set_update_time (UpDeviceGlue *object, guint64 value);

guint up_device_glue_get_type_ (UpDeviceGlue *object);
void up_device_glue_set_type_ (UpDeviceGlue *object, guint value);

gboolean up_device_glue_get_power_supply (UpDeviceGlue *object);
void up_device_glue_set_power_supply (UpDeviceGlue *object, gboolean value);

gboolean up_device_glue_get_has_history (UpDeviceGlue *object);
void up_device_glue_set_has_history (UpDeviceGlue *object, gboolean value);

gboolean up_device_glue_get_has_statistics (UpDeviceGlue *object);
void up_device_glue_set_has_statistics (UpDeviceGlue *object, gboolean value);

gboolean up_device_glue_get_online (UpDeviceGlue *object);
void up_device_glue_set_online (UpDeviceGlue *object, gboolean value);

gdouble up_device_glue_get_energy (UpDeviceGlue *object);
void up_device_glue_set_energy (UpDeviceGlue *object, gdouble value);

gdouble up_device_glue_get_energy_empty (UpDeviceGlue *object);
void up_device_glue_set_energy_empty (UpDeviceGlue *object, gdouble value);

gdouble up_device_glue_get_energy_full (UpDeviceGlue *object);
void up_device_glue_set_energy_full (UpDeviceGlue *object, gdouble value);

gdouble up_device_glue_get_energy_full_design (UpDeviceGlue *object);
void up_device_glue_set_energy_full_design (UpDeviceGlue *object, gdouble value);

gdouble up_device_glue_get_energy_rate (UpDeviceGlue *object);
void up_device_glue_set_energy_rate (UpDeviceGlue *object, gdouble value);

gdouble up_device_glue_get_voltage (UpDeviceGlue *object);
void up_device_glue_set_voltage (UpDeviceGlue *object, gdouble value);

gdouble up_device_glue_get_luminosity (UpDeviceGlue *object);
void up_device_glue_set_luminosity (UpDeviceGlue *object, gdouble value);

gint64 up_device_glue_get_time_to_empty (UpDeviceGlue *object);
void up_device_glue_set_time_to_empty (UpDeviceGlue *object, gint64 value);

gint64 up_device_glue_get_time_to_full (UpDeviceGlue *object);
void up_device_glue_set_time_to_full (UpDeviceGlue *object, gint64 value);

gdouble up_device_glue_get_percentage (UpDeviceGlue *object);
void up_device_glue_set_percentage (UpDeviceGlue *object, gdouble value);

gdouble up_device_glue_get_temperature (UpDeviceGlue *object);
void up_device_glue_set_temperature (UpDeviceGlue *object, gdouble value);

gboolean up_device_glue_get_is_present (UpDeviceGlue *object);
void up_device_glue_set_is_present (UpDeviceGlue *object, gboolean value);

guint up_device_glue_get_state (UpDeviceGlue *object);
void up_device_glue_set_state (UpDeviceGlue *object, guint value);

gboolean up_device_glue_get_is_rechargeable (UpDeviceGlue *object);
void up_device_glue_set_is_rechargeable (UpDeviceGlue *object, gboolean value);

gdouble up_device_glue_get_capacity (UpDeviceGlue *object);
void up_device_glue_set_capacity (UpDeviceGlue *object, gdouble value);

guint up_device_glue_get_technology (UpDeviceGlue *object);
void up_device_glue_set_technology (UpDeviceGlue *object, guint value);

guint up_device_glue_get_warning_level (UpDeviceGlue *object);
void up_device_glue_set_warning_level (UpDeviceGlue *object, guint value);

const gchar *up_device_glue_get_icon_name (UpDeviceGlue *object);
gchar *up_device_glue_dup_icon_name (UpDeviceGlue *object);
void up_device_glue_set_icon_name (UpDeviceGlue *object, const gchar *value);


/* ---- */

#define UP_TYPE_DEVICE_GLUE_PROXY (up_device_glue_proxy_get_type ())
#define UP_DEVICE_GLUE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_DEVICE_GLUE_PROXY, UpDeviceGlueProxy))
#define UP_DEVICE_GLUE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UP_TYPE_DEVICE_GLUE_PROXY, UpDeviceGlueProxyClass))
#define UP_DEVICE_GLUE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_DEVICE_GLUE_PROXY, UpDeviceGlueProxyClass))
#define UP_IS_DEVICE_GLUE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_DEVICE_GLUE_PROXY))
#define UP_IS_DEVICE_GLUE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_DEVICE_GLUE_PROXY))

typedef struct _UpDeviceGlueProxy UpDeviceGlueProxy;
typedef struct _UpDeviceGlueProxyClass UpDeviceGlueProxyClass;
typedef struct _UpDeviceGlueProxyPrivate UpDeviceGlueProxyPrivate;

struct _UpDeviceGlueProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UpDeviceGlueProxyPrivate *priv;
};

struct _UpDeviceGlueProxyClass
{
  GDBusProxyClass parent_class;
};

GType up_device_glue_proxy_get_type (void) G_GNUC_CONST;

void up_device_glue_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UpDeviceGlue *up_device_glue_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UpDeviceGlue *up_device_glue_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void up_device_glue_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UpDeviceGlue *up_device_glue_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UpDeviceGlue *up_device_glue_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UP_TYPE_DEVICE_GLUE_SKELETON (up_device_glue_skeleton_get_type ())
#define UP_DEVICE_GLUE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_DEVICE_GLUE_SKELETON, UpDeviceGlueSkeleton))
#define UP_DEVICE_GLUE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UP_TYPE_DEVICE_GLUE_SKELETON, UpDeviceGlueSkeletonClass))
#define UP_DEVICE_GLUE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_DEVICE_GLUE_SKELETON, UpDeviceGlueSkeletonClass))
#define UP_IS_DEVICE_GLUE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_DEVICE_GLUE_SKELETON))
#define UP_IS_DEVICE_GLUE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_DEVICE_GLUE_SKELETON))

typedef struct _UpDeviceGlueSkeleton UpDeviceGlueSkeleton;
typedef struct _UpDeviceGlueSkeletonClass UpDeviceGlueSkeletonClass;
typedef struct _UpDeviceGlueSkeletonPrivate UpDeviceGlueSkeletonPrivate;

struct _UpDeviceGlueSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UpDeviceGlueSkeletonPrivate *priv;
};

struct _UpDeviceGlueSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType up_device_glue_skeleton_get_type (void) G_GNUC_CONST;

UpDeviceGlue *up_device_glue_skeleton_new (void);


G_END_DECLS

#endif /* __UP_DEVICE_GLUE_H__ */
