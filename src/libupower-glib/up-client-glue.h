/*
 * Generated by gdbus-codegen 2.42.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __UP_CLIENT_GLUE_H__
#define __UP_CLIENT_GLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.UPower */

#define UP_TYPE_CLIENT_GLUE (up_client_glue_get_type ())
#define UP_CLIENT_GLUE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_CLIENT_GLUE, UpClientGlue))
#define UP_IS_CLIENT_GLUE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_CLIENT_GLUE))
#define UP_CLIENT_GLUE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UP_TYPE_CLIENT_GLUE, UpClientGlueIface))

struct _UpClientGlue;
typedef struct _UpClientGlue UpClientGlue;
typedef struct _UpClientGlueIface UpClientGlueIface;

struct _UpClientGlueIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_enumerate_devices) (
    UpClientGlue *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_critical_action) (
    UpClientGlue *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_display_device) (
    UpClientGlue *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_daemon_version) (UpClientGlue *object);

  gboolean  (*get_lid_is_closed) (UpClientGlue *object);

  gboolean  (*get_lid_is_present) (UpClientGlue *object);

  gboolean  (*get_on_battery) (UpClientGlue *object);

  void (*device_added) (
    UpClientGlue *object,
    const gchar *arg_device);

  void (*device_removed) (
    UpClientGlue *object,
    const gchar *arg_device);

};

GType up_client_glue_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *up_client_glue_interface_info (void);
guint up_client_glue_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void up_client_glue_complete_enumerate_devices (
    UpClientGlue *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void up_client_glue_complete_get_display_device (
    UpClientGlue *object,
    GDBusMethodInvocation *invocation,
    const gchar *device);

void up_client_glue_complete_get_critical_action (
    UpClientGlue *object,
    GDBusMethodInvocation *invocation,
    const gchar *action);



/* D-Bus signal emissions functions: */
void up_client_glue_emit_device_added (
    UpClientGlue *object,
    const gchar *arg_device);

void up_client_glue_emit_device_removed (
    UpClientGlue *object,
    const gchar *arg_device);



/* D-Bus method calls: */
void up_client_glue_call_enumerate_devices (
    UpClientGlue *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_client_glue_call_enumerate_devices_finish (
    UpClientGlue *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean up_client_glue_call_enumerate_devices_sync (
    UpClientGlue *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void up_client_glue_call_get_display_device (
    UpClientGlue *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_client_glue_call_get_display_device_finish (
    UpClientGlue *proxy,
    gchar **out_device,
    GAsyncResult *res,
    GError **error);

gboolean up_client_glue_call_get_display_device_sync (
    UpClientGlue *proxy,
    gchar **out_device,
    GCancellable *cancellable,
    GError **error);

void up_client_glue_call_get_critical_action (
    UpClientGlue *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_client_glue_call_get_critical_action_finish (
    UpClientGlue *proxy,
    gchar **out_action,
    GAsyncResult *res,
    GError **error);

gboolean up_client_glue_call_get_critical_action_sync (
    UpClientGlue *proxy,
    gchar **out_action,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *up_client_glue_get_daemon_version (UpClientGlue *object);
gchar *up_client_glue_dup_daemon_version (UpClientGlue *object);
void up_client_glue_set_daemon_version (UpClientGlue *object, const gchar *value);

gboolean up_client_glue_get_on_battery (UpClientGlue *object);
void up_client_glue_set_on_battery (UpClientGlue *object, gboolean value);

gboolean up_client_glue_get_lid_is_closed (UpClientGlue *object);
void up_client_glue_set_lid_is_closed (UpClientGlue *object, gboolean value);

gboolean up_client_glue_get_lid_is_present (UpClientGlue *object);
void up_client_glue_set_lid_is_present (UpClientGlue *object, gboolean value);


/* ---- */

#define UP_TYPE_CLIENT_GLUE_PROXY (up_client_glue_proxy_get_type ())
#define UP_CLIENT_GLUE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_CLIENT_GLUE_PROXY, UpClientGlueProxy))
#define UP_CLIENT_GLUE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UP_TYPE_CLIENT_GLUE_PROXY, UpClientGlueProxyClass))
#define UP_CLIENT_GLUE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_CLIENT_GLUE_PROXY, UpClientGlueProxyClass))
#define UP_IS_CLIENT_GLUE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_CLIENT_GLUE_PROXY))
#define UP_IS_CLIENT_GLUE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_CLIENT_GLUE_PROXY))

typedef struct _UpClientGlueProxy UpClientGlueProxy;
typedef struct _UpClientGlueProxyClass UpClientGlueProxyClass;
typedef struct _UpClientGlueProxyPrivate UpClientGlueProxyPrivate;

struct _UpClientGlueProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UpClientGlueProxyPrivate *priv;
};

struct _UpClientGlueProxyClass
{
  GDBusProxyClass parent_class;
};

GType up_client_glue_proxy_get_type (void) G_GNUC_CONST;

void up_client_glue_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UpClientGlue *up_client_glue_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UpClientGlue *up_client_glue_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void up_client_glue_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UpClientGlue *up_client_glue_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UpClientGlue *up_client_glue_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UP_TYPE_CLIENT_GLUE_SKELETON (up_client_glue_skeleton_get_type ())
#define UP_CLIENT_GLUE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_CLIENT_GLUE_SKELETON, UpClientGlueSkeleton))
#define UP_CLIENT_GLUE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UP_TYPE_CLIENT_GLUE_SKELETON, UpClientGlueSkeletonClass))
#define UP_CLIENT_GLUE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_CLIENT_GLUE_SKELETON, UpClientGlueSkeletonClass))
#define UP_IS_CLIENT_GLUE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_CLIENT_GLUE_SKELETON))
#define UP_IS_CLIENT_GLUE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_CLIENT_GLUE_SKELETON))

typedef struct _UpClientGlueSkeleton UpClientGlueSkeleton;
typedef struct _UpClientGlueSkeletonClass UpClientGlueSkeletonClass;
typedef struct _UpClientGlueSkeletonPrivate UpClientGlueSkeletonPrivate;

struct _UpClientGlueSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UpClientGlueSkeletonPrivate *priv;
};

struct _UpClientGlueSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType up_client_glue_skeleton_get_type (void) G_GNUC_CONST;

UpClientGlue *up_client_glue_skeleton_new (void);


G_END_DECLS

#endif /* __UP_CLIENT_GLUE_H__ */
